'use strict';

// Code adapted from https://codepen.io/barney-parker/pen/OPyYqy

const options = ["0", "28", "9", "26", "30", "11", "7", "20", "32", "17", "5", "22", "34", "15", "3", "24", "36", "13", "1", "00", "27", "10", "25", "29", "12", "8", "19", "31", "18", "6", "21", "33", "16", "4", "23", "35", "14", "2"];

let startAngle = 0;
const arc = Math.PI / (options.length / 2);
let spinTimeout = null;

let spinTime = 0;
let spinTimeTotal = 0;

let ctx;
let spinAngleStart;

let isWheelActive = false;

let effectsList;
const rules = "1. At the start of every player's turn (before Draw Phase), roll the roulette wheel. 2. Effects generated by the roulette do not start chains and cannot be responded to.";


document.getElementById("spin").addEventListener("click", spin);

function getColor(space) {
    const redNumbers = ["1","3","5","7","9","12","14","16","18","19","21","23","25","27","30","32","34","36"];
    const blackNumbers = ["2","4","6","8","10","11","13","15","17","20","22","24","26","28","29","31","33","35"];
    const greenNumbers = ["0", "00"];
    const errorColor = "#8749ff";

    if(greenNumbers.includes(space)) return "#016d29";
    else if(blackNumbers.includes(space)) return "#000000";
    else if(redNumbers.includes(space)) return "#e0080b";
    else return errorColor;
}

function drawRouletteWheel() {
  const canvas = document.getElementById("canvas");
  if (canvas.getContext) {
    const outsideRadius = 200;
    const textRadius = 160;
    const insideRadius = 125;

    ctx = canvas.getContext("2d");
    ctx.clearRect(0,0,500,500);

    ctx.strokeStyle = "black";
    ctx.lineWidth = 2;

    ctx.font = 'bold 14px \'Nunito\', sans-serif';

    for(var i = 0; i < options.length; i++) {
      let angle = startAngle + i * arc;
      ctx.fillStyle = getColor(options[i]);

      ctx.beginPath();
      ctx.arc(250, 250, outsideRadius, angle, angle + arc, false);
      ctx.arc(250, 250, insideRadius, angle + arc, angle, true);
      ctx.stroke();
      ctx.fill();

      ctx.save();
      ctx.shadowOffsetX = -1;
      ctx.shadowOffsetY = -1;
      ctx.shadowBlur    = 0;
      ctx.shadowColor   = "#f3c620";
      ctx.fillStyle = "white";
      ctx.translate(250 + Math.cos(angle + arc / 2) * textRadius, 
                    250 + Math.sin(angle + arc / 2) * textRadius);
      ctx.rotate(angle + arc / 2 + Math.PI / 2);
      let text = options[i];
      ctx.fillText(text, -ctx.measureText(text).width / 2, 0);
      ctx.restore();
    } 

    //Arrow
    ctx.fillStyle = "#f3c620";
    ctx.beginPath();
    ctx.moveTo(250 - 4, 250 - (outsideRadius + 5));
    ctx.lineTo(250 + 4, 250 - (outsideRadius + 5));
    ctx.lineTo(250 + 4, 250 - (outsideRadius - 5));
    ctx.lineTo(250 + 9, 250 - (outsideRadius - 5));
    ctx.lineTo(250 + 0, 250 - (outsideRadius - 13));
    ctx.lineTo(250 - 9, 250 - (outsideRadius - 5));
    ctx.lineTo(250 - 4, 250 - (outsideRadius - 5));
    ctx.lineTo(250 - 4, 250 - (outsideRadius + 5));
    ctx.fill();
  }
}

function spin() {
  if(!isWheelActive) {
    isWheelActive = true;
    resetText();
    spinAngleStart = Math.random() * 10 + 10;
    spinTime = 0;
    spinTimeTotal = Math.random() * 3 + 4 * 1000;
    rotateWheel();
  }
}

function rotateWheel() {
  spinTime += 30;
  if(spinTime >= spinTimeTotal) {
    stopRotateWheel();
    return;
  }
  let spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);
  startAngle += (spinAngle * Math.PI / 180);
  drawRouletteWheel();
  spinTimeout = setTimeout('rotateWheel()', 30);
}

function stopRotateWheel() {
  clearTimeout(spinTimeout);
  const degrees = startAngle * 180 / Math.PI + 90;
  const arcd = arc * 180 / Math.PI;
  const index = Math.floor((360 - degrees % 360) / arcd);
  ctx.save();
  ctx.font = 'bold 50px \'Nunito\', sans-serif';
  const text = options[index]
  ctx.fillText(text, 250 - ctx.measureText(text).width / 2, 250 + 10);
  ctx.restore();
  writeEffectText(effectsList.get(text));
  isWheelActive = false;
}

function easeOut(t, b, c, d) {
  const ts = (t/=d)*t;
  const tc = ts*t;
  return b+c*(tc + -3*ts + 3*t);
}

async function getEffects(jsonStr) {
  return fetch(jsonStr).then(res => res.json()).then(data => new Map(Object.entries(data)));
}

let textElement;
const effectElement = document.getElementById('effectDisplay');

function writeEffectText(textStr) {  
  textElement = document.createElement('h2');
  // Get value from map
  textElement.innerHTML = textStr;
  effectElement.appendChild(textElement);
}

function resetText() {
  if (effectElement.childNodes.length != 0) {
    textElement.remove();
  }
}

function init() {
  drawRouletteWheel();
  getEffects('effects.json').then(effects => effectsList = effects);
  writeEffectText(rules);
}

init();

